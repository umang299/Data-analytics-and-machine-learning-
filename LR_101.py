# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1et4ddQUGU1x1PnrzdeeuXErFxIkCFaIi
"""

# Importing Libraries 

import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns 
import pandas as pd

from sklearn.linear_model import LinearRegression 
from sklearn.metrics import r2_score 
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

import pickle

df = pd.read_csv("/content/Salary_Data.csv")    #Loading dataset

print(df.info())    # View an overview of the dataset

# Classifying Years of Experience as 
 #  -> A for experience > 7 years and < 11 years 
 #  -> B for experience < 7 years and > 5 years 
 #  -> C for experience < 5 years and > 3 years 
 #  -> D for experience < 3 years and > 1 year 

LevelOfExp = []
for i in range(0,30):
  if (df['YearsExperience'][i] >= 1.0 and df['YearsExperience'][i] < 3.0):
    LevelOfExp.append('D')
  elif (df['YearsExperience'][i] >= 3.0 and df['YearsExperience'][i] < 5.0):
    LevelOfExp.append('C')
  elif (df['YearsExperience'][i] >= 5.0 and df['YearsExperience'][i] < 7.0):
    LevelOfExp.append('B')
  elif (df['YearsExperience'][i] >= 7.0 and df['YearsExperience'][i] < 11):
    LevelOfExp.append('A')

df['LevelOfExp'] = LevelOfExp

print(df.info())

sns.countplot(x='LevelOfExp',data=df)   # Data visualisation

sns.scatterplot(x='Salary',y='YearsExperience',hue='LevelOfExp',data=df) # multivarite analysis

final_df = pd.get_dummies(df,drop_first=False)  # converting categorical data into numeric data 
print(final_df.info())

columns = ["YearsExperience","LevelOfExp_A","LevelOfExp_B","LevelOfExp_C","LevelOfExp_D","Salary"]  # re-arranging columns 
final_df = final_df[columns]

X = final_df.iloc[:,:4].values  # DEFINING THE INDEPENDENT VARIABLE 
Y = final_df.iloc[:,-1].values   # DEFINING THE INDEPENDENT VARIABLE 

X = np.array(X)                   # CONVERTING INTO A NUMPY ARRAY  AND RESHAPING 
Y = np.array(Y).reshape(-1,1)



scaler = StandardScaler(with_mean=True)   #SCALING THE DEPENDENT AND INDEPENDENT VARIABLES 
X = scaler.fit_transform(X)
Y = scaler.fit_transform(Y)

print(X.shape)

print(Y.shape)

X,x,Y,y = train_test_split(X,Y,test_size=0.2,random_state=0) # SPLITTING THE DATASET INTO TEST AND TRAIN DATA

model = LinearRegression()  #  DEFINING THE MODEL AS LINEAR REGRESSION SINCE WE SEE A LINEAR CORELATION BETWEEN DEPENDNET AND INDEPENDENT VARIABLES 
model.fit(X,Y)
pred_y = model.predict(x)

print(pred_y)

print(r2_score(y,pred_y))

filename= 'Lr_101.sav'
pickle.dump(model, open(filename,'wb'))  # SAVING THE MODEL

load_model = pickle.load(open(filename,'rb'))









